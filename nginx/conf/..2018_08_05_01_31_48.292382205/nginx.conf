worker_processes auto;

events {
    worker_connections 1024;
}

http {
    server_names_hash_bucket_size 128;
    log_format upstream_time '$remote_addr - [$time_local] "$host" '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" '
                             'rt="$request_time" uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
    access_log /dev/stdout upstream_time;

    lua_package_path "$prefix/lualib/?.lua;;";
    ssl_dhparam /opt/openresty/nginx/dhparam.pem;

    init_by_lua_block {
        gateway = require "gateway"
        cjson = require "cjson.safe"
        template = require "template"
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    gzip               on; gzip_http_version  1.1; gzip_min_length    1024; gzip_types         text/plain text/css text/javascript application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss; gzip_proxied       any; gzip_disable       msie6; gzip_comp_level    1;
        server {
                listen 443;
        
        ssl_certificate_by_lua_block {
          local ssl = require "ngx.ssl"
          ssl.clear_certs()
          ngx.exit(ngx.ERROR)
        }

        ssl_certificate           /etc/ssl/common/cert.pem;
        ssl_certificate_key       /etc/ssl/common/key.pem;
        ssl on;
        ssl_session_cache   shared:SSL:50m;
        ssl_session_timeout 5m;
        ssl_prefer_server_ciphers on;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;
    }

    
    
    server {
                          listen 80;
                  
        server_name auth.192.168.2.40.xip.io;

        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                gateway.acme('/opt/openresty/nginx/account/192.168.2.40.xip.io/')
            }
        }

        
        
          
                            location @handler_504_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_GATEWAY_TIMEOUT
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc504.html.j2",
                  { name = "auth"
                                    , ns = "hasura"
                                    }
                )
            }
          }
                    location @handler_404_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc404.html.j2",
                  { name = "auth" }
                )
            }
          }
                  
        location / {

                                        error_page 504 = @handler_504_1;
                            proxy_intercept_errors on;
              error_page 404 = @handler_404_1;
                          
                          header_filter_by_lua_block {

                if ngx.var.http_origin then

                                        local allowOrigin = true

                  
                  if allowOrigin then
                    ngx.header["Access-Control-Allow-Origin"] = ngx.var.http_origin
                    ngx.header["Access-Control-Allow-Credentials"] = "true"
                    ngx.header["Access-Control-Allow-Methods"] = "GET, PUT, PATCH, DELETE, POST, OPTIONS"
                  end
                  if ngx.req.get_method() == "OPTIONS" then
                    ngx.header["Access-Control-Max-Age"] = "1728000"
                    ngx.header["Access-Control-Allow-Headers"] = ngx.var.http_access_control_request_headers
                    ngx.header["Content-Length"] = "0"
                    ngx.header["Content-Type"] = "text/plain charset=UTF-8"
                  end
                end
              }

            if ($request_method = "OPTIONS") {
                return 204;
            }
            
            
            rewrite_by_lua_block {
                gateway.authn("192.168.2.40.xip.io")
            }

                
            
            proxy_pass       http://10.102.242.32:80/;
                        proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-By    "hasura-gateway";
            proxy_set_header X-Hasura-Base-Domain "192.168.2.40.xip.io";

            

        }

            }

    
    
    server {
                          listen 80;
                  
        server_name data.192.168.2.40.xip.io;

        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                gateway.acme('/opt/openresty/nginx/account/192.168.2.40.xip.io/')
            }
        }

        
        
          
                            location @handler_504_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_GATEWAY_TIMEOUT
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc504.html.j2",
                  { name = "data"
                                    , ns = "hasura"
                                    }
                )
            }
          }
                    location @handler_404_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc404.html.j2",
                  { name = "data" }
                )
            }
          }
                  
        location / {

                                        error_page 504 = @handler_504_1;
                            proxy_intercept_errors on;
              error_page 404 = @handler_404_1;
                          
                          header_filter_by_lua_block {

                if ngx.var.http_origin then

                                        local allowOrigin = true

                  
                  if allowOrigin then
                    ngx.header["Access-Control-Allow-Origin"] = ngx.var.http_origin
                    ngx.header["Access-Control-Allow-Credentials"] = "true"
                    ngx.header["Access-Control-Allow-Methods"] = "GET, PUT, PATCH, DELETE, POST, OPTIONS"
                  end
                  if ngx.req.get_method() == "OPTIONS" then
                    ngx.header["Access-Control-Max-Age"] = "1728000"
                    ngx.header["Access-Control-Allow-Headers"] = ngx.var.http_access_control_request_headers
                    ngx.header["Content-Length"] = "0"
                    ngx.header["Content-Type"] = "text/plain charset=UTF-8"
                  end
                end
              }

            if ($request_method = "OPTIONS") {
                return 204;
            }
            
            
            rewrite_by_lua_block {
                gateway.authn("192.168.2.40.xip.io")
            }

                
            
            proxy_pass       http://10.108.35.200:80/;
                        proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-By    "hasura-gateway";
            proxy_set_header X-Hasura-Base-Domain "192.168.2.40.xip.io";

            

        }

            }

    
    
    server {
                          listen 80;
                  
        server_name filestore.192.168.2.40.xip.io;

        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                gateway.acme('/opt/openresty/nginx/account/192.168.2.40.xip.io/')
            }
        }

        
        
          
                            location @handler_504_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_GATEWAY_TIMEOUT
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc504.html.j2",
                  { name = "filestore"
                                    , ns = "hasura"
                                    }
                )
            }
          }
                    location @handler_404_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc404.html.j2",
                  { name = "filestore" }
                )
            }
          }
                  
        location / {

                                        error_page 504 = @handler_504_1;
                            proxy_intercept_errors on;
              error_page 404 = @handler_404_1;
                          
                          header_filter_by_lua_block {

                if ngx.var.http_origin then

                                        local allowOrigin = true

                  
                  if allowOrigin then
                    ngx.header["Access-Control-Allow-Origin"] = ngx.var.http_origin
                    ngx.header["Access-Control-Allow-Credentials"] = "true"
                    ngx.header["Access-Control-Allow-Methods"] = "GET, PUT, PATCH, DELETE, POST, OPTIONS"
                  end
                  if ngx.req.get_method() == "OPTIONS" then
                    ngx.header["Access-Control-Max-Age"] = "1728000"
                    ngx.header["Access-Control-Allow-Headers"] = ngx.var.http_access_control_request_headers
                    ngx.header["Content-Length"] = "0"
                    ngx.header["Content-Type"] = "text/plain charset=UTF-8"
                  end
                end
              }

            if ($request_method = "OPTIONS") {
                return 204;
            }
            
            
            rewrite_by_lua_block {
                gateway.authn("192.168.2.40.xip.io")
            }

                
            
            proxy_pass       http://10.108.52.21:80/;
                        proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-By    "hasura-gateway";
            proxy_set_header X-Hasura-Base-Domain "192.168.2.40.xip.io";

            proxy_request_buffering off;
client_max_body_size 100M;


        }

            }

    
    
    server {
                          listen 80;
                  
        server_name notify.192.168.2.40.xip.io;

        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                gateway.acme('/opt/openresty/nginx/account/192.168.2.40.xip.io/')
            }
        }

        
        
          
                            location @handler_504_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_GATEWAY_TIMEOUT
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc504.html.j2",
                  { name = "notify"
                                    , ns = "hasura"
                                    }
                )
            }
          }
                    location @handler_404_1 {
            root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.header.content_type = 'text/html'
                template.render(
                  "svc404.html.j2",
                  { name = "notify" }
                )
            }
          }
                  
        location / {

                                        error_page 504 = @handler_504_1;
                            proxy_intercept_errors on;
              error_page 404 = @handler_404_1;
                          
                          header_filter_by_lua_block {

                if ngx.var.http_origin then

                                        local allowOrigin = true

                  
                  if allowOrigin then
                    ngx.header["Access-Control-Allow-Origin"] = ngx.var.http_origin
                    ngx.header["Access-Control-Allow-Credentials"] = "true"
                    ngx.header["Access-Control-Allow-Methods"] = "GET, PUT, PATCH, DELETE, POST, OPTIONS"
                  end
                  if ngx.req.get_method() == "OPTIONS" then
                    ngx.header["Access-Control-Max-Age"] = "1728000"
                    ngx.header["Access-Control-Allow-Headers"] = ngx.var.http_access_control_request_headers
                    ngx.header["Content-Length"] = "0"
                    ngx.header["Content-Type"] = "text/plain charset=UTF-8"
                  end
                end
              }

            if ($request_method = "OPTIONS") {
                return 204;
            }
            
            
            rewrite_by_lua_block {
                gateway.authn("192.168.2.40.xip.io")
            }

                
            
            proxy_pass       http://10.102.30.68:80/;
                        proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-By    "hasura-gateway";
            proxy_set_header X-Hasura-Base-Domain "192.168.2.40.xip.io";

            

        }

            }

    
    server {
        listen      80 default_server;
        server_name _;
        location / {

                    root templates;
            content_by_lua_block {
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.header.content_type = 'text/html'
                local render_ctx = cjson.decode('[{"fqdn":{"subdomain":"auth","domain":"192.168.2.40.xip.io"},"locations":[{"path":"/","route":{"upstreamServicePort":80,"corsPolicy":"allow_all","enableAuth":true,"locationDirectives":"","upstreamService":{"namespace":"hasura","name":"auth"},"enableWebsockets":true,"authorizationPolicy":null,"upstreamServicePath":"/"},"serverIP":"10.102.242.32"}]},{"fqdn":{"subdomain":"data","domain":"192.168.2.40.xip.io"},"locations":[{"path":"/","route":{"upstreamServicePort":80,"corsPolicy":"allow_all","enableAuth":true,"locationDirectives":"","upstreamService":{"namespace":"hasura","name":"data"},"enableWebsockets":true,"authorizationPolicy":null,"upstreamServicePath":"/"},"serverIP":"10.108.35.200"}]},{"fqdn":{"subdomain":"filestore","domain":"192.168.2.40.xip.io"},"locations":[{"path":"/","route":{"upstreamServicePort":80,"corsPolicy":"allow_all","enableAuth":true,"locationDirectives":"proxy_request_buffering off;\nclient_max_body_size 100M;\n","upstreamService":{"namespace":"hasura","name":"filestore"},"enableWebsockets":true,"authorizationPolicy":null,"upstreamServicePath":"/"},"serverIP":"10.108.52.21"}]},{"fqdn":{"subdomain":"notify","domain":"192.168.2.40.xip.io"},"locations":[{"path":"/","route":{"upstreamServicePort":80,"corsPolicy":"allow_all","enableAuth":true,"locationDirectives":"","upstreamService":{"namespace":"hasura","name":"notify"},"enableWebsockets":true,"authorizationPolicy":null,"upstreamServicePath":"/"},"serverIP":"10.102.30.68"}]}]')
                template.render("noRoute404.html.j2", { servers = render_ctx})
            }

                }
    }

}

stream {
    server {
        listen 22 so_keepalive=30s::10;
        proxy_timeout 365d;
        proxy_pass 10.100.148.161:22;
    }
}
